<!DOCTYPE html>
<html xmlns:v-on="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Crypto Kitty Data</title>
    <link rel="stylesheet" href="css/main.css">
    <script type="application/javascript" src="https://cdn.jsdelivr.net/npm/vue@2.5.13/dist/vue.min.js"></script>
    <script defer src="https://use.fontawesome.com/releases/v5.0.6/js/all.js"></script>
    <script
            src="https://code.jquery.com/jquery-3.3.1.min.js"
            integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
            crossorigin="anonymous"></script>
</head>
<body>
<section class="hero is-danger is-bold">
    <div class="hero-body">
        <div class="container">
            <div class="media">
                <div class="media-left">
                    <figure class="image is-128x128">
                        <img src="https://storage.googleapis.com/ck-kitty-image/0x06012c8cf97bead5deae237070f9587f8e7a266d/111.png" alt="Knight Kitty">
                    </figure>
                </div>
                <div class="media-content is-vcentered">
                    <p class="title is-2">Kitty Battles</p>
                    <p class="subtitle is-4">Enter The Fray</p>
                </div>
            </div>

        </div>
    </div>
</section>
<div class="columns" id="app">
    <div class="column is-1-desktop">

    </div>
    <div class="column is-10-desktop">
        {% include "battlezone/partials/connection.html.twig" %}
        {% include "battlezone/partials/registration.html.twig" %}
        {% include "battlezone/partials/results.html.twig" %}
        {% include "battlezone/partials/battle.html.twig" %}
        {% include "battlezone/partials/queue.html.twig" %}
    </div>
    <div class="column is-1-desktop">

    </div>


    {% include "battlezone/partials/loadingModal.html.twig" %}
</div>

{% include "_footer.html.twig" %}

<script type="application/javascript">
var app = new Vue({
    el: '#app',
    data: {
        page : 'connection',
        service : true,
        conn : null,
        profile : '',
        turn : false,
        signedIn : false,

        kitties : [],
        selectionPage : 0,
        selectionLimit : 20,
        selectionOffset: 0,
        loadingRemoteAsset : false,
        battleId : '',
        winner : '',
        selectedKitty : {
            image   : 'https://bulma.io/images/placeholders/128x128.png',
            health  : 100,
            attack  : 10,
            defense : 10,
            heal    : 5,
            wins    : 0,
            losses  : 0,
            id : 0,
            skill1 : 'Basic Attack',
            skill2 : 'Power Attack',
            skill3 : 'Lick Paws',
            skill1tier : 1,
            skill2tier : 1,
            skill3tier : 1,
            maxhealth : 100
        },
        opponentKitty : {
            image   : 'https://bulma.io/images/placeholders/128x128.png',
            health  : '???',
            attack  : '???',
            defense : '???',
            heal    : '???',
            wins    : '???',
            losses  : '???',
            id : '???',
            skill1 : '???',
            skill2 : '???',
            skill3 : '???',
            skill1tier : '???',
            skill2tier : '???',
            skill3tier : '???',
            maxhealth : 100
        },
        battle_log : [

        ]
    },
    methods: {
        skill1 : function () {
            //console.log("Using Skill 1");
            this.conn.send(JSON.stringify({
                command : "player.take.turn",
                skill : 1,
                battleId : app.battleId,
                address : app.profile,
                kittyId : app.selectedKitty.id
            }));
        },
        skill2 : function () {
            //console.log("Using Skill 2");
            this.conn.send(JSON.stringify({
                command : "player.take.turn",
                skill : 2,
                battleId : app.battleId,
                address : app.profile,
                kittyId : app.selectedKitty.id
            }));
        },
        skill3 : function () {
            //console.log("Using Skill 3");
            this.conn.send(JSON.stringify({
                command : "player.take.turn",
                skill : 3,
                battleId : app.battleId,
                address : app.profile,
                kittyId : app.selectedKitty.id
            }));
        },
        login : function () {
            var signer = web3.eth.defaultAccount || web3.eth.accounts[0];
            var original_message = "Crypto Kitty Battles!";
            var message = web3.toHex(original_message);
            var message_hash = web3.sha3(
                '\u0019Ethereum Signed Message:\n' +
                message.length.toString() +
                message
            );

            web3.personal.sign(message, signer, function(err, res) {
                if (err) console.error(err);

                app.signedIn = true;
                app.page = 'registration';
                app.loadingKitties();
            });
        },
        connect : function () {
            this.service = true;

            this.conn = new WebSocket('ws://dna.kitty.fyi:8080/battle');

            this.conn.onmessage = function (ev) {
                var msg = JSON.parse(ev.data);

                console.log(msg);

                if (app.page === 'queue') { // We are waiting in Queue
                    if (msg.event === 'battle.started') {
                        app.page = 'battle';

                        app.battleId = msg.uuid;

                        //Load the state
                        if (msg.kitty1.id === app.selectedKitty.id) {
                            app.selectedKitty = msg.kitty1;
                            app.opponentKitty = msg.kitty2;
                        } else {
                            app.selectedKitty = msg.kitty2;
                            app.opponentKitty = msg.kitty1;
                        }

                        app.battle_log.unshift("Battle Started!");
                        app.battle_log.unshift("Kitty #" + msg.turn + " has first move!");

                        app.turn = msg.turn === app.selectedKitty.id;
                    }
                }

                if (app.page === 'battle') { // We are in Battle
                    if (msg.event === 'battle.action') {
                        app.battle_log.unshift(msg.message);
                    }

                    if (msg.event === 'battle.updated') {
                        //Load the state
                        if (msg.kitty1.id === app.selectedKitty.id) {
                            app.selectedKitty = msg.kitty1;
                            app.opponentKitty = msg.kitty2;
                        } else {
                            app.selectedKitty = msg.kitty2;
                            app.opponentKitty = msg.kitty1;
                        }

                        app.battle_log.unshift("Kitty #" + msg.turn + "'s move");

                        if (msg.turn === app.selectedKitty.id) {
                            app.turn = true;
                        } else {
                            app.turn = false;
                        }

                    }

                    if (msg.event === 'battle.ended') {
                        app.winner = msg.winner;

                        app.page = 'results';
                    }
                }
            };

            this.conn.onopen = function (ev) {

            };

            this.conn.onerror = function (ev) {
                app.service = false;
                app.page = 'connection';
                app.profile = '';
            };

            this.conn.onclose = function (ev) {
                if (ev.code !== 3001) {
                    app.profile = '';
                    app.service = false;
                    app.page = 'connection';
                }
            };
        },
        loadingKitties : function () {

            this.loadingRemoteAsset = true;

            var kittiesUrl = 'https://api.cryptokitties.co/kitties?limit='+this.selectionLimit+'&owner_wallet_address='+this.profile+'&offset='+this.selectionOffset;

            $.get(kittiesUrl, function (res) {
                console.log(res);

                for (i in res.kitties) {
                    app.kitties.push(res.kitties[i]);
                }

                app.loadingRemoteAsset = false;
            });
        },
        selectKitty : function (index) {
            this.selectedKitty.image = this.kitties[index].image_url_cdn;
            this.selectedKitty.id = this.kitties[index].id;
        },
        enterBattle : function () {
            this.page = 'queue';
            this.battle_log = [];

            this.conn.send(JSON.stringify({
                command : "enter.queue",
                address : this.profile,
                kittyId : app.selectedKitty.id
            }));
        }
    },
    mounted : function () {
        this.connect();

        this.$nextTick(function () {
            if (typeof web3 !== 'undefined') {
                this.profile = web3.eth.accounts[0];
            }
        });

    },
    delimiters : ["<%", "%>"]
});
</script>
</body>
</html>



